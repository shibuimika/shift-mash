import { Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon } from '@heroicons/react/24/outline';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import type { Shift, RequestType } from '@/lib/types';
import { ROLE_LABELS, ROUTES } from '@/lib/constants';
import { api, queryKeys } from '@/lib/api';
import { useToast } from './ToastProvider';

interface PublishConfirmModalProps {
  isOpen: boolean;
  onClose: () => void;
  shift: Shift;
  type: RequestType;
}

export function PublishConfirmModal({ isOpen, onClose, shift, type }: PublishConfirmModalProps) {
  const { showToast } = useToast();
  const queryClient = useQueryClient();
  const navigate = useNavigate();

  const isRecruiting = type === 'recruiting';
  const title = isRecruiting ? '‰∫∫Âì°ÂãüÈõÜ„ÇíÂÖ¨Èñã' : 'Ê¥æÈÅ£ÂèØËÉΩ„ÇíÂÖ¨Èñã';
  const message = isRecruiting ? 
    '‰ªñÂ∫óËàó„Å´‰∫∫Âì°ÂãüÈõÜ„ÇíÂÖ¨Èñã„Åó„Åæ„Åô„ÅãÔºü' : 
    '‰ªñÂ∫óËàó„Å´Ê¥æÈÅ£ÂèØËÉΩ„Å®„Åó„Å¶ÂÖ¨Èñã„Åó„Åæ„Åô„ÅãÔºü';

  // ÂÖ¨ÈñãÂá¶ÁêÜ„Éü„É•„Éº„ÉÜ„Éº„Ç∑„Éß„É≥
  const publishMutation = useMutation({
    mutationFn: async () => {
      const currentPublishings = await api.getPublishings();
      const publishings = currentPublishings.data || { recruitings: [], availables: [] };

      let newItemId = '';

      if (isRecruiting) {
        // ‰∫∫Âì°ÂãüÈõÜ„ÇíËøΩÂä†
        const newRecruiting = {
          id: `r_${Date.now()}_${Math.random().toString(36).substring(2)}`,
          storeId: shift.storeId,
          shiftId: shift.id,
          role: shift.role,
          start: shift.start,
          end: shift.end,
          date: shift.date, // „Ç∑„Éï„Éà„ÅÆÂÆüÈöõ„ÅÆÊó•‰ªò„Çí‰ΩøÁî®
          open: true,
          createdAt: Date.now(),
          message: `${shift.start}-${shift.end}„ÅÆ${ROLE_LABELS[shift.role]}„Çπ„Çø„ÉÉ„Éï„ÇíÂãüÈõÜ„Åó„Å¶„ÅÑ„Åæ„Åô`,
        };
        publishings.recruitings.push(newRecruiting);
        newItemId = newRecruiting.id;
      } else {
        // Ê¥æÈÅ£ÂèØËÉΩ„ÇíËøΩÂä†
        const newAvailable = {
          id: `a_${Date.now()}_${Math.random().toString(36).substring(2)}`,
          storeId: shift.storeId,
          workerId: shift.workerId || 'w1', // „Éá„É¢Áî®„Å´„Éá„Éï„Ç©„É´„ÉàÂÄ§
          shiftId: shift.id,
          role: shift.role,
          start: shift.start,
          end: shift.end,
          date: shift.date, // „Ç∑„Éï„Éà„ÅÆÂÆüÈöõ„ÅÆÊó•‰ªò„Çí‰ΩøÁî®
          open: true,
          createdAt: Date.now(),
          message: `${shift.start}-${shift.end}„ÅÆ${ROLE_LABELS[shift.role]}„Åß‰ªñÂ∫óÂøúÊè¥ÂèØËÉΩ„Åß„Åô`,
        };
        publishings.availables.push(newAvailable);
        newItemId = newAvailable.id;
      }

      const result = await api.updatePublishing(publishings);
      
      // „Éá„É¢„Éá„Éº„Çø„ÇíÁîüÊàêÔºàÂÖ¨ÈñãÂá¶ÁêÜ„ÅÆ‰∏ÄÈÉ®„Å®„Åó„Å¶ÂêåÊúüÁöÑ„Å´ÂÆüË°åÔºâ
      if (isRecruiting) {
        // ‰∫∫Âì°ÂãüÈõÜ„ÅÆÂ†¥Âêà„ÄÅ„Éû„ÉÉ„ÉÅ„Åô„ÇãÊ¥æÈÅ£ÂèØËÉΩ‰∫∫Êùê„ÇíÁîüÊàê
        const demoResult = await api.generateDemoAvailablesForRecruiting(newItemId);
        console.log('„Éá„É¢„Éá„Éº„ÇøÁîüÊàêÁµêÊûúÔºàÊ¥æÈÅ£ÂèØËÉΩ‰∫∫ÊùêÔºâ:', demoResult);
        if (demoResult.success) {
          console.log('‚úÖ Ëµ§Ëâ≤„Éú„Çø„É≥Áî®„Éá„É¢„Éá„Éº„ÇøÁîüÊàêÊàêÂäü:', demoResult.data);
        } else {
          console.warn('„Éá„É¢„Éá„Éº„ÇøÁîüÊàê„Å´Â§±Êïó:', demoResult.message);
        }
      } else {
        // Ê¥æÈÅ£ÂèØËÉΩ„ÅÆÂ†¥Âêà„ÄÅ„Éû„ÉÉ„ÉÅ„Åô„ÇãÂãüÈõÜ„ÇíÁîüÊàê
        const demoResult = await api.generateDemoRecruitingsForAvailable(newItemId);
        console.log('„Éá„É¢„Éá„Éº„ÇøÁîüÊàêÁµêÊûúÔºàÂãüÈõÜÔºâ:', demoResult);
        if (demoResult.success) {
          console.log('‚úÖ ÈùíËâ≤„Éú„Çø„É≥Áî®„Éá„É¢„Éá„Éº„ÇøÁîüÊàêÊàêÂäü:', demoResult.data);
        } else {
          console.warn('„Éá„É¢„Éá„Éº„ÇøÁîüÊàê„Å´Â§±Êïó:', demoResult.message);
        }
      }
      
      return result;
    },
    onSuccess: () => {
      showToast('success', 'ÂÖ¨ÈñãÂÆå‰∫Ü', isRecruiting ? '‰∫∫Âì°ÂãüÈõÜ„ÇíÂÖ¨Èñã„Åó„Åæ„Åó„Åü' : 'Ê¥æÈÅ£ÂèØËÉΩ„Å®„Åó„Å¶ÂÖ¨Èñã„Åó„Åæ„Åó„Åü');
      // „Éá„Éº„Çø„ÇíÂÜçÂèñÂæó„Åó„Å¶„Åã„Çâ„Éö„Éº„Ç∏ÈÅ∑Áßª
      queryClient.invalidateQueries({ queryKey: queryKeys.publishings });
      onClose();
      
      // Â∞ë„ÅóÈÅÖÂª∂„Åó„Å¶„Åã„Çâ„Éö„Éº„Ç∏ÈÅ∑ÁßªÔºà„Éá„Éº„ÇøÊõ¥Êñ∞„ÇíÁ¢∫ÂÆü„Å´„Åô„Çã„Åü„ÇÅÔºâ
      setTimeout(() => {
        console.log('üì± /inbox„Éö„Éº„Ç∏„Å´ÈÅ∑Áßª„Åó„Åæ„Åô');
        navigate(ROUTES.INBOX);
      }, 500);
    },
    onError: (error) => {
      console.error('ÂÖ¨ÈñãÂá¶ÁêÜ„Ç®„É©„Éº:', error);
      showToast('error', '„Ç®„É©„Éº', 'ÂÖ¨ÈñãÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    },
  });

  const handleConfirm = () => {
    publishMutation.mutate();
  };

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-md transform overflow-hidden rounded-2xl bg-white p-6 text-left align-middle shadow-xl transition-all">
                {/* „Éò„ÉÉ„ÉÄ„Éº */}
                <div className="flex items-center justify-between mb-4">
                  <Dialog.Title as="h3" className="text-lg font-medium leading-6 text-gray-900">
                    {title}
                  </Dialog.Title>
                  <button
                    onClick={onClose}
                    className="text-gray-400 hover:text-gray-500"
                    type="button"
                  >
                    <XMarkIcon className="w-6 h-6" />
                  </button>
                </div>

                {/* „É°„ÉÉ„Çª„Éº„Ç∏ */}
                <div className="mb-6">
                  <p className="text-sm text-gray-600 mb-4">
                    {message}
                  </p>
                  
                  {/* „Ç∑„Éï„ÉàË©≥Á¥∞ */}
                  <div className="bg-gray-50 rounded-lg p-3">
                    <div className="text-sm">
                      <p className="font-medium text-gray-900">
                        {shift.start} - {shift.end}
                      </p>
                      <p className="text-gray-600">
                        {ROLE_LABELS[shift.role]} / 1Âêç
                      </p>
                      {shift.notes && (
                        <p className="text-gray-500 text-xs mt-1 italic">
                          {shift.notes}
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                {/* „Éú„Çø„É≥ */}
                <div className="flex space-x-3">
                  <button
                    onClick={onClose}
                    className="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    disabled={publishMutation.isPending}
                  >
                    „Ç≠„É£„É≥„Çª„É´
                  </button>
                  <button
                    onClick={handleConfirm}
                    className="flex-1 px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    disabled={publishMutation.isPending}
                  >
                    {publishMutation.isPending ? (
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        ÂÖ¨Èñã‰∏≠...
                      </div>
                    ) : (
                      'ÂÖ¨Èñã„Åô„Çã'
                    )}
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}
